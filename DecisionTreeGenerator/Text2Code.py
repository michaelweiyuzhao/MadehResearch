import io

def main():
    source = input('please enter source file name: ')
    file_name = input('please enter file name you want script to be saved as: ')
    language = input('please enter language to generate script in: ')
    args = input('please enter comma delimited list of attributes from source file (if any): ')
    print('\nGenerating script...\n')
    generate_script(source,file_name,args,language)
    return
    
def generate_script(source,file_name,args='',language='python'):
    """Generates a function based on a tree text file generated by RapidMiner.
    
    arguments:
    source -- tree text file generated by RapidMiner that this function pulls from
        ie, 'Tree.txt'
    file_name -- save file name of the generated script, extention appended automatically
        ie, 'PCITree'
    args -- function arguments, these are the names of the attributes used in the tree
        ie, 'name, gender, income, ...'
    language -- the language to translate into.
        ----------------------------------------------------------
        |language           | description            | extention |
        ----------------------------------------------------------
        |'python' (default) | converts to Python 3   | .py       |
        |'matlab'           | converts to MATLAB     | .m        |
        |'javascript'       | converts to JavaScript | .js       |
        ----------------------------------------------------------
    """
    
    with io.open(source,'r') as f_r:
        f_w = None
        language = language.lower()
        if language == 'python':
            with io.open(file_name + '.py','w') as f_w:
                convert_python(f_r,f_w,file_name,args)
                f_w.close()
                return
        elif language == 'matlab':
            with io.open(file_name + '.m','w') as f_w:
                convert_matlab(f_r,f_w,file_name,args)
                f_w.close()
                return
        elif language == 'javascript':
            with io.open(file_name + '.js','w') as f_w:
                convert_javascript(f_r,f_w,file_name,args)
                f_w.close()
                return
        else:
            print('Requested language is not supported.')
            print('Exiting program.')
            f_r.close()
            return
        
    
def convert_python(f_r,f_w,file_name,args):
        
    f_w.write('def ' + file_name + '(' + args + '):\n\n')
    ws = False
    parsed = False
    for line in f_r:
        if (not ws) and (not parsed) and (line == '\n'):
            ws = True
        elif (ws) and (line == '\n'):
            ws = False
            parsed = True
        elif ws:
            indents = 1
            while(line[0] == '|'):
                line = line[4:]
                indents += 1
            if ':' in line:
                lines = line.split(':')
                lines[0] = lines[0].strip()
                lines[1] = lines[1].strip()
                for i in range(0,indents):
                    f_w.write('    ')
                f_w.write('if ' + lines[0] + ':\n')
                for i in range(0,indents+1):            
                    f_w.write('    ')
                f_w.write('print(\'' + lines[1] + '\')\n')
                for i in range(0,indents+1):
                    f_w.write('    ')
                f_w.write('return \''+ lines[1] + '\'\n')
            else:
                line = line.strip()
                for i in range(0,indents):
                    f_w.write('    ')
                f_w.write('if ' + line + ':\n')
    
    f_w.write('\n')
    f_w.write('    return \'\'')
    
    print('Generation successful')
    return
    
def convert_matlab(f_r,f_w,file_name,args):
    
    f_w.write('function result_str = ' + file_name + '(' + args + ')\n\n')
    end_cond = []
    ws = False
    parsed = False
    for line in f_r:
        if (not ws) and (not parsed) and (line == '\n'):
            ws = True
        elif (ws) and (line == '\n'):
            for i in reversed(range(0,end_cond[-2]+1)):
                for j in range(0,i):
                    f_w.write('    ')
                f_w.write('end\n')
            ws = False
            parsed = True
        elif ws:
            indents = 0
            while(line[0] == '|'):
                line = line[4:]
                indents += 1
            end_cond.append(indents)
            if len(end_cond) > 1:
                if end_cond[-2] >= indents:
                    for i in reversed(range(indents,end_cond[-2]+1)):
                        for j in range(0,i):
                            f_w.write('    ')
                        f_w.write('end\n')
                    end_cond.remove(indents)
            if ':' in line:
                lines = line.split(':')
                lines[0] = lines[0].strip()
                lines[1] = lines[1].strip()
                for i in range(0,indents):
                    f_w.write('    ')
                f_w.write('if ' + lines[0] + '\n')
                for i in range(0,indents+1):            
                    f_w.write('    ')
                f_w.write('fprintf(\'' + lines[1] + '\');\n')
                for i in range(0,indents+1):
                    f_w.write('    ')
                f_w.write('result_str = \'' + lines[1] + '\';\n')
                for i in range(0,indents+1):
                    f_w.write('    ')              
                f_w.write('return;\n')
            else:
                line = line.strip()
                for i in range(0,indents):
                    f_w.write('    ')
                f_w.write('if ' + line + '\n')
                
    f_w.write('\n')
    f_w.write('return;')
    
    print('Generation successful')
    return
    
def convert_javascript(f_r,f_w,file_name,args):
    
    f_w.write('function ' + file_name + '(' + args + '){\n\n')
    end_cond = []
    ws = False
    parsed = False
    for line in f_r:
        if (not ws) and (not parsed) and (line == '\n'):
            ws = True
        elif (ws) and (line == '\n'):
            for i in reversed(range(1,end_cond[-2]+1)):
                for j in range(0,i):
                    f_w.write('    ')
                f_w.write('}\n')
            ws = False
            parsed = True
        elif ws:
            indents = 1
            while(line[0] == '|'):
                line = line[4:]
                indents += 1
            end_cond.append(indents)
            if len(end_cond) > 1:
                if end_cond[-2] >= indents:
                    for i in reversed(range(indents,end_cond[-2]+1)):
                        for j in range(0,i):
                            f_w.write('    ')
                        f_w.write('}\n')
                    end_cond.remove(indents)
            if ':' in line:
                lines = line.split(':')
                lines[0] = lines[0].strip()
                lines[1] = lines[1].strip()
                for i in range(0,indents):
                    f_w.write('    ')
                f_w.write('if(' + lines[0] + '){\n')
                for i in range(0,indents+1):            
                    f_w.write('    ')
                f_w.write('console.log(\"' + lines[1] + '\");\n')
                for i in range(0,indents+1):
                    f_w.write('    ')              
                f_w.write('return \"' + lines[1] + '\";\n')
            else:
                line = line.strip()
                for i in range(0,indents):
                    f_w.write('    ')
                f_w.write('if(' + line + '){\n')
                
    f_w.write('\n')
    f_w.write('    return \"\"\n')
    f_w.write('}')
    
    print('Generation successful')
    return
    
if __name__ == '__main__':
    main()